import { VK, Keyboard, MessageContext, ButtonColor } from 'vk-io';
import { HearManager } from '@vk-io/hear';
import * as userController from '../controllers/user-controller';
import * as groupController from '../controllers/group-controller';
import * as subGroupController from '../controllers/subGroup-controller';
import * as universityFetch from '../helpers/univ.api';
import * as utils from '../utils';
import { IUser, UserRole } from '../models/User';
import { IGroup } from '../models/Group';
import { ISubGroup } from '../models/SubGroup';
import config from '../../config';

enum Commands {
  SET_USER = 'SET_USER',
  CHANGE_GROUP = 'CHANGE_GROUP',
  CHANGE_SUBGROUP = 'CHANGE_SUBGROUP',
  MARK = 'MARK',
  TEST_MARK = 'TEST_MARK',
  COMMAND_TEST = 'COMMAND_TEST',
}

const vk = new VK({
  token: config.VK_API_TOKEN,
  apiLimit: config.VK_API_LIMIT,
});

const hearManager = new HearManager<MessageContext>();
vk.updates.on('message_new', hearManager.middleware);

// –ú–∏–¥–ª–≤–µ–∏—Ä
vk.updates.use(async (context, next) => {
  console.log('–º–∏–¥–ª–≤–µ–∏—Ä: ', context);

  // –ö–æ–º–º–∞–Ω–¥–µ—Ä –¥–ª—è –∫–Ω–æ–ø–æ–∫
  // if (!context.isOutbox) {
  //   const { messagePayload } = context;
  //   context.state.command =
  //     messagePayload && messagePayload.command ? messagePayload.command : null;
  //   return next();
  // }

  return next();
});

/**
 * –°–ø—Ä–∞–≤–∫–∞ —Å –∫–æ–º–∞–Ω–¥–∞–º–∏
 */
hearManager.hear(/^\/help$/i, async (context) => {
  // –ß–µ–∫ —Ä–æ–ª–∏ —é–∑–µ—Ä–∞, –¥–ª—è —Å—Ç–∞—Ä–æ—Å—Ç—ã –¥–æ–ø. –∫–æ–º–∞–Ω–¥—ã
  await context.send({
    message: `–°–ø–∏—Å–æ–∫ –¥–æ—Å—Ç—É–ø–Ω—ã—Ö –∫–æ–º–∞–Ω–¥:
/start - –∑–∞–ø—É—Å–∫ —Å—Ç–∞—Ä—Ç–æ–≤–æ–π —Ü–µ–ø–æ—á–∫–∏
/change_group –ì–†–£–ü–ü–ê - –∏–∑–º–µ–Ω–∏—Ç—å –≥—Ä—É–ø–ø—É
/change_subgroup - –∏–∑–º–µ–Ω–∏—Ç—å –≥—Ä—É–ø–ø—É
/delete - —É–¥–∞–ª–∏—Ç—å —Å–µ–±—è –∏–∑ –±–∞–∑—ã
/me - –ø–æ–∫–∞–∑–∞—Ç—å —á—Ç–æ –æ —Ç–µ–±–µ –∑–∞–ø–∏—Å–∞–Ω–æ –≤ –±–¥
/help - –æ—Ç–æ–±—Ä–∞–∑–∏—Ç—å —Ç–µ–∫—É—â—É—é –ø–æ–¥—Å–∫–∞–∑–∫—É
/test
/test_search –ì–†–£–ü–ü–ê - —Ç–µ—Å—Ç –ø–æ–∏—Å–∫–∞ –≥—Ä—É–ø–ø—ã
/test_user - —Ç–µ—Å—Ç–æ–≤—ã–π –¢–´
/test_mark - —Ç–µ—Å—Ç callback –∫–Ω–æ–ø–∫–∏`,
  });
});

/**
 * –°—Ç–∞—Ä—Ç–æ–≤–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ
 */
hearManager.hear(/^\/start$/i, async (context) => {
  const [vkUser] = await vk.api.users.get({
    user_ids: context.senderId.toString(),
  });

  const isExist = await userController.isExist(vkUser.id);

  if (isExist) {
    await context.send({
      message: `–¢—ã —É–∂–µ –≤ –±–∞–∑–µ üôÉ
–î–ª—è –ø—Ä–æ—Å–º–æ—Ç—Ä–∞ —Å–ø–∏—Å–∫–∞ –∫–æ–º–∞–Ω–¥ –≤–≤–µ–¥–∏ /help
–∏–ª–∏ –∂–¥–∏ —Å–æ–æ–±—â–µ–Ω–∏—è –æ—Ç –º–µ–Ω—è —Å –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–µ–π –æ –ø–∞—Ä–µ.`,
    });
    return;
  }

  await context.send({
    message: `–°–ø–∞—Å–∏–±–æ, —á—Ç–æ –¥—É–º–∞–µ—à—å –æ —Å–≤–æ–µ–º —Å—Ç–∞—Ä–æ—Å—Ç–µ, –Ω–∞–¥–µ—é—Å—å –º—ã –ø–æ–¥—Ä—É–∂–∏–º—Å—è üòä
–ü–∞—Ä—É —Å–ª–æ–≤ –ø—Ä–æ –º–µ–Ω—è –º–µ–Ω—è.
–Ø –±—É–¥—É –∫–∞–∂–¥—É—é –ø–∞—Ä—É –ø–æ —Ç–≤–æ–µ–º—É —Ä–∞—Å–ø–∏—Å–∞–Ω–∏—é –æ—Ç–ø—Ä–∞–≤–ª—è—Ç—å —Å–æ–æ–±—â–µ–Ω–∏–µ.
–î–ª—è —Ç–æ–≥–æ, —á—Ç–æ–±—ã –æ—Ç–º–µ—Ç–∏—Ç—å—Å—è - –ø—Ä–æ—Å—Ç–æ –Ω–∞–∂–º–∏ –Ω–∞ –∫–Ω–æ–ø–∫—É —É —Å–æ–æ–±—â–µ–Ω–∏—è ‚ò∫
–£ —Ç–µ–±—è –±—É–¥–µ—Ç —Ä–æ–≤–Ω–æ –î–ï–ù–¨ (–¥–æ 23:59:59), —á—Ç–æ–±—ã –æ—Ç–º–µ—Ç–∏—Ç—å—Å—è, –∏–º–µ–π —ç—Ç–æ –≤ –≤–∏–¥—É!
–¢–µ–ø–µ—Ä—å –¥–∞–≤–∞–π –æ–ø—Ä–µ–¥–µ–ª–∏–º —Ç–≤–æ—é –≥—Ä—É–ø–ø—É. –î–ª—è —ç—Ç–æ–≥–æ –≤–≤–µ–¥–∏
/set_group –ì–†–£–ü–ü–ê (—Ä–µ–≥–∏—Å—Ç—Ä –Ω–µ –∏–º–µ–µ—Ç –∑–Ω–∞—á–µ–Ω–∏—è)
–ù–∞–ø—Ä–∏–º–µ—Ä /set_group –∏—Å—Ç-191`,
  });
});

/**
 * –û–ø—Ä–µ–¥–µ–ª–µ–Ω–∏–µ –≥—Ä—É–ø–ø—ã
 */
hearManager.hear(/^\/set_group (.+)$/i, async (context) => {
  const user = await userController.getByVkId(context.senderId);
  if (user) {
    await context.send({
      message: `–¢—ã —É–∂–µ –≤ –±–∞–∑–µ, —á—Ç–æ–±—ã —Å–º–µ–Ω–∏—Ç—å –≥—Ä—É–ø–ø—É –≤–≤–µ–¥–∏
/change_group –ì–†–£–ü–ü–ê (—Ä–µ–≥–∏—Å—Ç—Ä –Ω–µ –∏–º–µ–µ—Ç –∑–Ω–∞—á–µ–Ω–∏—è)`,
    });
    return;
  }

  const [, inputGroup] = context.$match;
  const groupNameRegExp = RegExp(`^${inputGroup}$`, 'i');

  const searchResponse = await universityFetch.searchByGroup(inputGroup);
  const filteredResponse = searchResponse.data.filter((el) => groupNameRegExp.test(el.label));

  if (!filteredResponse.length) {
    await context.send({ message: `–û—Ç–≤–µ—Ç –Ω–µ–æ–¥–Ω–æ–∑–Ω–∞—á–Ω—ã–π, –ø–æ–ø—Ä–æ–±—É–π –µ—â–µ —Ä–∞–∑` });
    return;
  }

  const [group] = filteredResponse;

  let groupModel = await groupController.getById(group.id);

  if (!groupModel) {
    const subGroups = await utils.getSubGroups(group.id, group.label);
    if (!subGroups) {
      await context.send({
        message: `–ß—Ç–æ-—Ç–æ –ø–æ—à–ª–æ –Ω–µ —Ç–∞–∫, –æ—Ç–ø—Ä–∞–≤—å –∫–æ–º–∞–Ω–¥—É –µ—â–µ —Ä–∞–∑`,
      });
      return;
    }

    const subs = await subGroupController.createMany(subGroups);
    groupModel = {
      groupId: group.id,
      groupName: group.label,
      subGroups: subs!,
    };
    groupModel = await groupController.create(groupModel);
  }

  const keyboard = Keyboard.builder();
  groupModel?.subGroups.forEach((el) => {
    keyboard.callbackButton({
      label: el.subGroupName,
      color: ButtonColor.PRIMARY,
      payload: {
        command: Commands.SET_USER,
        groupUid: groupModel?._id,
        subGroupUid: el._id,
      },
    });
  });
  keyboard.inline();

  await context.send({
    message: `–¢–≤–æ—è –≥—Ä—É–ø–ø–∞: ${groupModel!.groupName}.
–¢–µ–ø–µ—Ä—å –≤—ã–±–µ—Ä–∏ –ø–æ–¥–≥—Ä—É–ø–ø—É`,
    keyboard,
  });
});

/**
 * –°–º–µ–Ω–∞ –≥—Ä—É–ø–ø—ã
 */
hearManager.hear(/^\/change_group (.+)$/i, async (context) => {
  const [, inputGroup] = context.$match;
  const groupNameRegExp = RegExp(`^${inputGroup}$`, 'i');

  const searchResponse = await universityFetch.searchByGroup(inputGroup);
  const filteredResponse = searchResponse.data.filter((el) => groupNameRegExp.test(el.label));

  if (!filteredResponse.length) {
    await context.send({ message: `–û—Ç–≤–µ—Ç –Ω–µ–æ–¥–Ω–æ–∑–Ω–∞—á–Ω—ã–π, –ø–æ–ø—Ä–æ–±—É–π –µ—â–µ —Ä–∞–∑` });
    return;
  }

  const [group] = filteredResponse;

  const user = await userController.getByVkId(context.senderId);
  if (user?.group.groupId === group.id) {
    await context.send({ message: `–¢—ã –≤–≤–µ–ª —Å–≤–æ—é —Ç–µ–∫—É—â—É—é –≥—Ä—É–ø–ø—É, –ø–æ–ø—Ä–æ–±—É–π /help` });
    return;
  }

  let groupModel = await groupController.getById(group.id);

  if (!groupModel) {
    const subGroups = await utils.getSubGroups(group.id, group.label);
    if (!subGroups) {
      await context.send({
        message: `–ß—Ç–æ-—Ç–æ –ø–æ—à–ª–æ –Ω–µ —Ç–∞–∫, –æ—Ç–ø—Ä–∞–≤—å –∫–æ–º–∞–Ω–¥—É –µ—â–µ —Ä–∞–∑`,
      });
      return;
    }

    const subs = await subGroupController.createMany(subGroups);
    groupModel = {
      groupId: group.id,
      groupName: group.label,
      subGroups: subs!,
    };
    groupModel = await groupController.create(groupModel);
  }

  const keyboard = Keyboard.builder();
  groupModel?.subGroups.forEach((el) => {
    keyboard.callbackButton({
      label: el.subGroupName,
      color: ButtonColor.PRIMARY,
      payload: {
        command: Commands.CHANGE_GROUP,
        groupUid: groupModel?._id,
        subGroupUid: el._id,
        oldSubGroupName: user?.subGroup.subGroupName,
        newSubGroupName: el.subGroupName,
      },
    });
  });
  keyboard.inline();

  await context.send({
    message: `–¢–≤–æ—è –≥—Ä—É–ø–ø–∞: ${groupModel!.groupName}.\n–¢–µ–ø–µ—Ä—å –≤—ã–±–µ—Ä–∏ –ø–æ–¥–≥—Ä—É–ø–ø—É:`,
    keyboard,
  });
});

/**
 * –°–º–µ–Ω–∞ –ø–æ–¥–≥—Ä—É–ø–ø—ã
 */
hearManager.hear(/^\/change_subgroup$/i, async (context) => {
  const user = await userController.getByVkId(context.senderId);
  if (!user) {
    await context.send({ message: `–¢–µ–±—è –Ω–µ—Ç –≤ –±–∞–∑–µ, –≤–≤–µ–¥–∏ /start` });
    return;
  }

  const groupModel = await groupController.getById(user.group.groupId);

  if (groupModel && groupModel.subGroups.length < 1) {
    await context.send({ message: `–£ –≤–∞—Å —Ç–æ–ª—å–∫–æ –æ–¥–Ω–∞ –ø–æ–¥–≥—Ä—É–ø–ø–∞` });
  }

  const keyboard = Keyboard.builder();
  groupModel?.subGroups.forEach((el) => {
    if (el.subGroupId !== user.subGroup.subGroupId) {
      keyboard.callbackButton({
        label: el.subGroupName,
        color: ButtonColor.PRIMARY,
        payload: {
          command: Commands.CHANGE_SUBGROUP,
          subGroupUid: el._id,
          oldSubGroupName: user?.subGroup.subGroupName,
          newSubGroupName: el.subGroupName,
        },
      });
    }
  });
  keyboard.inline();

  await context.send({
    message: `–í—ã–±–µ—Ä–∏ –Ω–æ–≤—É—é –ø–æ–¥–≥—Ä—É–ø–ø—É`,
    keyboard,
  });
});

/**
 * –£–¥–∞–ª–µ–Ω–∏–µ —é–∑–µ—Ä–∞ –∏–∑ –±–¥
 */
hearManager.hear(/^\/delete$/i, async (context) => {
  await userController.remove(context.senderId);
  await context.send({
    message: `–í—ã —É–¥–∞–ª–µ–Ω—ã –∏–∑ –±–∞–∑—ã üòî\n–ù–∞–¥–µ—é—Å—å, –≤—ã –ø—Ä–æ—Å—Ç–æ —Ç–µ—Å—Ç–∏—Ä—É–µ—Ç–µ —ç—Ç—É –∫–æ–º–∞–Ω–¥—É üò•
–ß—Ç–æ–±—ã –Ω–∞—á–∞—Ç—å —Å–Ω–∞—á–∞–ª–∞, –≤–≤–µ–¥–∏—Ç–µ /start`,
  });
});

/**
 * –ò–Ω—Ñ–∞ –æ —é–∑–µ—Ä–µ
 */
hearManager.hear(/^\/me$/i, async (context) => {
  const user = await userController.getByVkId(context.senderId);
  if (!user) {
    await context.send({
      message: `–ö —Å–æ–∂–∞–ª–µ–Ω–∏—é, —Ç–µ–±—è –Ω–µ—Ç –≤ –ë–î, –≤–≤–µ–¥–∏ /start`,
    });
    return;
  }

  await context.send({
    message: `–í–æ—Ç –∫–∞–∫ —Ç—ã –∑–∞–ø–∏—Å–∞–Ω –≤ –ë–î: ${JSON.stringify(user, null, '  ')}`,
  });
});

/**
 * –¢–µ—Å—Ç
 */
// hearManager.hear(/^\/test$/i, async (context) => {});

/**
 * –¢–µ—Å—Ç –∑–∞–ø–∏—Å–∏ —é–∑–µ—Ä–∞ –≤ –±–¥
 */
hearManager.hear(/^\/test_user$/i, async (context) => {
  const dbUser = await userController.getByVkId(context.senderId);

  if (dbUser) {
    await context.send({
      message: `–í–æ—Ç –∂–µ —Ç—ã –≤ –±–∞–∑–µ, –¥—É—Ä–∏–∫, —á—Ç–æ —Ç—ã —Ö–æ—á–µ—à—å —Å–¥–µ–ª–∞—Ç—å?
${JSON.stringify(dbUser, null, '  ')}\n/help –≤ –ø–æ–º–æ—â—å`,
    });
    return;
  }

  const subGroups: ISubGroup[] = [
    { subGroupId: 1354, subGroupName: '–ò–°–¢-191/1' },
    { subGroupId: 1355, subGroupName: '–ò–°–¢-191/2' },
  ];
  const subs = await subGroupController.createMany(subGroups);

  const group: IGroup = {
    groupId: 452,
    groupName: '–ò–°–¢-191',
    subGroups: subs!,
  };
  const gr = await groupController.create(group);

  const [vkUser] = await vk.api.users.get({
    user_ids: context.senderId.toString(),
  });
  const candidate: IUser = {
    userName: vkUser.first_name,
    userSurname: vkUser.last_name,
    vkId: context.senderId,
    peerId: context.peerId,
    role: UserRole.MEMBER,
    group: gr?._id,
    subGroup: subs?.find((el) => el.subGroupId === 1355)?._id,
  };
  const user = await userController.create(candidate);
  await context.send({
    message: `–£—Å–ø–µ—à–Ω–æ, –≤–æ—Ç —Ç—ã: ${JSON.stringify(user, null, '  ')}`,
  });
});

/**
 * –¢–µ—Å—Ç —Ä–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞–Ω–∏—è —Å–æ–æ–±—â–µ–Ω–∏—è
 */
hearManager.hear(/^\/test_mark$/i, async (context) => {
  if (context.conversationMessageId) {
    const replyMessageId = context.conversationMessageId + 1;
    await context.send({
      message: `${replyMessageId.toString()}`,
      keyboard: Keyboard.builder()
        .callbackButton({
          label: Commands.TEST_MARK,
          color: Keyboard.SECONDARY_COLOR,
          payload: {
            command: Commands.TEST_MARK,
          },
        })
        .inline(),
    });
    return;
  }

  await context.send({ message: `–ß—Ç–æ-—Ç–æ –ø–æ—à–ª–æ –Ω–µ —Ç–∞–∫, –ø–æ–ø—Ä–æ–±—É–π –µ—â–µ —Ä–∞–∑` });
});

/**
 * –¢–µ—Å—Ç –ø–æ–∏—Å–∫–∞ –ø–æ–¥–≥—Ä—É–ø–ø –ø–æ id –∏ –Ω–∞–∑–≤–∞–Ω–∏—é –≥—Ä—É–ø–ø—ã
 */
hearManager.hear(/^\/test_search_subgroups$/i, async (context) => {
  const res = await utils.getSubGroups(452, '–ò–°–¢-191');
  await context.send({ message: JSON.stringify(res, null, '  ') });
});

// –í—Ö–æ–¥—è—â–µ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ —é–∑–µ—Ä–∞
// vk.updates.on('message_new', async (context) => {});

vk.updates.on('message_event', async (context) => {
  console.log('message event: ', context);

  switch (context.eventPayload.command) {
    /**
     * –ó–∞–ø–∏—Å—å –Ω–æ–≤–æ–≥–æ —é–∑–µ—Ä–∞ –≤ –±–¥
     */
    case Commands.SET_USER:
      {
        // –ò–∑–≤–ª–µ—á—å _id –≥—Ä—É–ø–ø—ã –∏ _id –ø–æ–¥–≥—Ä—É–ø–ø—ã
        const { groupUid, subGroupUid } = context.eventPayload;

        const [vkUser] = await vk.api.users.get({
          user_ids: context.userId.toString(),
        });
        const candidate: IUser = {
          userName: vkUser.first_name,
          userSurname: vkUser.last_name,
          vkId: context.userId,
          peerId: context.peerId,
          role: UserRole.MEMBER,
          group: groupUid,
          subGroup: subGroupUid,
        };

        // –°–æ—Ö—Ä–∞–Ω–∏—Ç—å —é–∑–µ—Ä–∞ –≤ –±–¥
        await userController.create(candidate);

        // –ü–æ–ª—É—á–∏—Ç—å –∏—Å—Ö–æ–¥–Ω–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ –∏ —É–±—Ä–∞—Ç—å –∫–ª–∞–≤–∏–∞—Ç—É—Ä—É
        const previousMessage = await vk.api.messages.getByConversationMessageId({
          peer_id: context.peerId,
          conversation_message_ids: context.conversationMessageId,
          group_id: context.$groupId,
        });
        const [message] = previousMessage.items;
        await vk.api.messages.edit({
          peer_id: context.peerId,
          conversation_message_id: context.conversationMessageId,
          message: message.text,
          group_id: context.$groupId,
        });

        const keyboard = Keyboard.builder()
          .callbackButton({
            label: `–û—Ç–º–µ—Ç–∏—Ç—å—Å—è`,
            color: ButtonColor.PRIMARY,
            payload: {
              command: Commands.TEST_MARK,
            },
          })
          .inline();

        await vk.api.messages.send({
          message: `–û—Ç–ª–∏—á–Ω–æ, —Ç—ã —É—Å–ø–µ—à–Ω–æ –≤–Ω–µ—Å–µ–Ω –≤ –±–∞–∑—É üôÇ
–ß—Ç–æ–±—ã –ø–æ—Å–º–æ—Ç—Ä–µ—Ç—å, –∫–∞–∫ —Ç—ã –∑–∞–ø–∏—Å–∞–Ω –≤ –±–¥, –≤–≤–µ–¥–∏ /me
–¢–µ–ø–µ—Ä—å –≤–∑–≥—è–Ω–∏, –∫–∞–∫ –±—É–¥–µ—Ç –≤—ã–≥–ª—è–¥–µ—Ç—å –ø—Ä–∏–º–µ—Ä —Å–æ–æ–±—â–µ–Ω–∏—è,
—á—Ç–æ–±—ã –æ—Ç–º–µ—Ç–∏—Ç—å —Å–µ–±—è, –Ω–∞–∂–º–∏ –∫–Ω–æ–ø–∫—É "–û—Ç–º–µ—Ç–∏—Ç—å—Å—è":
–ü—Ä–µ–¥–º–µ—Ç: –Ω–∞–∑–≤–∞–Ω–∏–µ –ø—Ä–µ–¥–º–µ—Ç–∞
–¢–∏–ø: –ª–µ–∫—Ü–∏—è/–ª–∞–±–∞/–ø–∑
–ù–∞—á–∞–ª–æ: –≤—Ä–µ–º—è –Ω–∞—á–∞–ª–∞ –ø–∞—Ä—ã
–ö–æ–Ω–µ—Ü: –≤—Ä–µ–º—è –∫–æ–Ω—Ü–∞ –ø–∞—Ä—ã`,
          peer_id: context.peerId,
          group_id: context.$groupId,
          keyboard,
          random_id: Date.now(),
        });
      }
      break;

    /**
     * –°–º–µ–Ω–∞ –≥—Ä—É–ø–ø—ã (uid –≥—Ä—É–ø–ø—ã –∏ uid –ø–æ–¥–≥—Ä—É–ø–ø—ã)
     */
    case Commands.CHANGE_GROUP:
      {
        // –ò–∑–≤–ª–µ—á—å _id –≥—Ä—É–ø–ø—ã –∏ _id –ø–æ–¥–≥—Ä—É–ø–ø—ã
        const { oldSubGroupName, newSubGroupName, groupUid, subGroupUid } = context.eventPayload;

        // –û–±–Ω–æ–≤–∏—Ç—å –≥—Ä—É–ø–ø—É –∏ –ø–æ–¥–≥—Ä—É–ø–ø—É
        await userController.updateGroup(context.userId, groupUid, subGroupUid);

        // –ü–æ–ª—É—á–∏—Ç—å –∏—Å—Ö–æ–¥–Ω–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ –∏ —É–±—Ä–∞—Ç—å –∫–ª–∞–≤–∏–∞—Ç—É—Ä—É
        const previousMessage = await vk.api.messages.getByConversationMessageId({
          peer_id: context.peerId,
          conversation_message_ids: context.conversationMessageId,
          group_id: context.$groupId,
        });
        const [message] = previousMessage.items;
        await vk.api.messages.edit({
          peer_id: context.peerId,
          conversation_message_id: context.conversationMessageId,
          message: message.text,
          group_id: context.$groupId,
        });

        await vk.api.messages.send({
          message: `–¢—ã —É—Å–ø–µ—à–Ω–æ —Å–º–µ–Ω–∏–ª –≥—Ä—É–ø–ø—É
—Å ${oldSubGroupName as string} –Ω–∞ ${newSubGroupName as string}`,
          peer_id: context.peerId,
          group_id: context.$groupId,
          random_id: Date.now(),
        });
      }
      break;

    /**
     * –°–º–µ–Ω–∞ –ø–æ–¥–≥—Ä—É–ø–ø—ã (uid –ø–æ–¥–≥—Ä—É–ø–ø—ã)
     */
    case Commands.CHANGE_SUBGROUP:
      {
        // –ò–∑–≤–ª–µ—á—å _id –≥—Ä—É–ø–ø—ã –∏ _id –ø–æ–¥–≥—Ä—É–ø–ø—ã
        const { oldSubGroupName, newSubGroupName, subGroupUid } = context.eventPayload;

        // –û–±–Ω–æ–≤–∏—Ç—å –ø–æ–¥–≥—Ä—É–ø–ø—É
        await userController.updateSubGroup(context.userId, subGroupUid);

        // –ü–æ–ª—É—á–∏—Ç—å –∏—Å—Ö–æ–¥–Ω–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ –∏ —É–±—Ä–∞—Ç—å –∫–ª–∞–≤–∏–∞—Ç—É—Ä—É
        const previousMessage = await vk.api.messages.getByConversationMessageId({
          peer_id: context.peerId,
          conversation_message_ids: context.conversationMessageId,
          group_id: context.$groupId,
        });
        const [message] = previousMessage.items;
        await vk.api.messages.edit({
          peer_id: context.peerId,
          conversation_message_id: context.conversationMessageId,
          message: message.text,
          group_id: context.$groupId,
        });

        await vk.api.messages.send({
          message: `–¢—ã —É—Å–ø–µ—à–Ω–æ —Å–º–µ–Ω–∏–ª –ø–æ–¥–≥—Ä—É–ø–ø—É
—Å ${oldSubGroupName as string} –Ω–∞ ${newSubGroupName as string}`,
          peer_id: context.peerId,
          group_id: context.$groupId,
          random_id: Date.now(),
        });
      }
      break;

    /**
     * –¢–µ—Å—Ç —Ä–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞–Ω–∏—è —Å–æ–æ–±—â–µ–Ω–∏—è
     */
    case Commands.TEST_MARK:
      {
        const previousMessage = await vk.api.messages.getByConversationMessageId({
          peer_id: context.peerId,
          conversation_message_ids: context.conversationMessageId,
          group_id: context.$groupId,
        });
        const [message] = previousMessage.items;
        await vk.api.messages.edit({
          peer_id: context.peerId,
          conversation_message_id: context.conversationMessageId,
          message: `${message.text}\n–û—Ç–º–µ—á–µ–Ω`,
          group_id: context.$groupId,
        });
      }
      break;

    /**
     * –û—Ç–º–µ—Ç–∏—Ç—å —é–∑–µ—Ä–∞ –Ω–∞ –ø–∞—Ä–µ
     */
    case Commands.MARK:
      break;

    default:
      break;
  }
});
// –†–∞–∑—Ä–µ—à–µ–Ω–∏–µ –æ—Ç–ø—Ä–∞–≤–∫–∏ —Å–æ–æ–±—â–µ–Ω–∏–π
// vk.updates.on('message_allow', (context) => console.log('message_allow: ', context));

// –í—Ö–æ–¥ –≤ –≥—Ä—É–ø–ø—É
// vk.updates.on('group_join', (context) => console.log('group_join: ', context));

export default vk;
